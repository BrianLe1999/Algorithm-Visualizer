{"version":3,"sources":["AlgoVisualizer/generateRandomArray.js","AlgoVisualizer/selectArraySize.js","AlgoVisualizer/selectSortingSpeed.js","AlgoVisualizer/selectSortingType.js","AlgoVisualizer/sortArray.js","AlgoVisualizer/sortingAlgorithm.js","AlgoVisualizer/algoVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["GenerateRandomArray","type","className","onClick","this","props","React","Component","SelectArraySize","handleOnChange","bind","e","size","target","value","alert","onChange","id","selected","SelectSortingSpeed","speed","SelectSortingType","name","SortArray","getBubbleSortAnimation","array","swap","temp","animationSteps","i","length","push","sortedArray","getSelectionSortAnimation","startScan","minIndex","minValue","index","getMergeSortAnimation","tempArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","k","j","merge","getQuickSortAnimation","quickSort","newPivotIndex","pivotIndex","maxIndex","firstIndex","getRandomNumberInAnInterval","firstValue","secondIndex","secondValue","thirdIndex","thirdValue","valueArray","sort","a","b","getPivotIndex","pivot","too_big_index","too_small_index","partition","items","lower","upper","random","AlgoVisualizer","state","arraySize","sortingSpeed","sortingAlgorithm","width","height","updateWindowDimensions","restoreOldArray","changeArraySize","createRandomArray","changeSortingSpeed","changeSortingType","bubbleSort","selectionSort","selectSortingAlgoritm","window","addEventListener","testSortingAlgorithm","setState","innerWidth","innerHeight","removeEventListener","newArray","arrayBars","document","getElementsByClassName","newHeight","style","randomArray","UPPER_LIMIT","newSize","enableSortButtonAfterSorting","newSortingSpeed","newSortingAlgorithm","console","log","getElementById","disabled","location","reload","disableSelectionsWhileSorting","stage","barOneStyle","barTwoStyle","bar1Idx","setTimeout","backgroundColor","barOneIndex","barTwoIndex","bar1Index","bar2Index","newHeight1","newHeight2","bar1","bar2","barStyle1","barStyle2","barOne","bar2Idx","barTwo","bar_width","map","element","key","refreshPage","sortFunction","randomLength","jsSortedArrray","sortArray","array1","array2","areTwoArraysEqual","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da2b5028.chunk.js","sourcesContent":["import React from 'react';\n\nexport class GenerateRandomArray extends React.Component {\n\n  render() {\n    return (<button type=\"button\" className=\"btn btn-primary\" onClick={this.props.onClick}>Restart</button>);\n  }\n}\n","import React from 'react';\n\nexport class SelectArraySize extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  handleOnChange(e) {\n    const sizeSelection = e.target.value;\n    let size;\n    switch(sizeSelection) {\n      case \"extra-small\":\n          size = 10;\n          break;\n      case \"small\":\n          size = 30;\n          break;\n      case \"medium\":\n          size = 50;\n          break;\n      case \"large\":\n          size = 70;\n          break;\n      case \"extra-large\":\n          size = 90;\n          break;\n      default:\n          alert(\"Please select the array size!\");\n          size = 10;\n    }\n    // send the array size back to AlgoVisualizer Component\n    this.props.onChange(size);\n  }\n  render() {\n    return (\n      <select className=\"custom-select\" id=\"size-selection\" onChange={this.handleOnChange}>\n        <option selected>Select Array Size</option>\n        <option value=\"extra-small\">Extra Small</option>\n        <option value=\"small\">Small</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"large\">Large</option>\n        <option value=\"extra-large\">Extra Large</option>\n      </select> );\n    }\n}\n","import React from 'react';\n\nexport class SelectSortingSpeed extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  handleOnChange(e) {\n    const speedSelection = e.target.value;\n    let speed;\n    switch(speedSelection) {\n      case \"slow\":\n          speed = 100;\n          break;\n      case \"medium\":\n          speed = 50;\n          break;\n      case \"fast\":\n          speed = 5;\n          break;\n      default:\n          alert(\"Please select the sorting speed!\");\n          speed = 10;\n    }\n    // send the speed selection back to AlgoVisualizer Component\n    this.props.onChange(speed);\n  }\n  render() {\n    return (\n      <select className=\"custom-select mx-auto\" id=\"speed-selection\" onChange={this.handleOnChange}>\n        <option selected>Select Sorting Speed</option>\n        <option value=\"slow\">Slow</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"fast\">Fast</option>\n      </select> );\n    }\n}\n","import React from 'react';\nimport './algoVisualizer.css';\n\nexport class SelectSortingType extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  // function to handle changes in the form\n  handleOnChange(e) {\n    // get the sorting type selection\n    const sortingTypeSelection = e.target.value;\n    let type;\n    switch(sortingTypeSelection) {\n      case \"bubble\":\n          type = \"Bubble\";\n          break;\n      case \"selection\":\n          type = \"Selection\";\n          break;\n      case \"merge\":\n          type = \"Merge\";\n          break;\n      case \"quick\":\n          type = \"Quick\";\n          break;\n      default:\n          type = \"Bubble\";\n    }\n    // send the algorithm type selection back to AlgoVisualizer Component\n    this.props.onChange(type);\n  }\n  render() {\n    return (\n      <div className=\"form-check form-check-inline type-selections\">\n        <div className=\"col-3\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"sortingAlgorithm\" value=\"buble\" onChange={this.handleOnChange}/>\n          <label className=\"form-check-label\" >\n              Bubble Sort\n          </label>\n        </div>\n        <div className=\"col-3\" >\n          <input className=\"form-check-input\" type=\"radio\" name=\"sortingAlgorithm\" value=\"selection\" onChange={this.handleOnChange}/>\n          <label className=\"form-check-label\">\n              Selection Sort\n            </label>\n        </div>\n        <div className=\"col-3\" >\n          <input className=\"form-check-input\" type=\"radio\" name=\"sortingAlgorithm\" value=\"merge\" onChange={this.handleOnChange}/>\n          <label className=\"form-check-label\" >\n              Merge Sort\n            </label>\n        </div>\n        <div className=\"col-3\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"sortingAlgorithm\" value=\"quick\" onChange={this.handleOnChange}/>\n          <label className=\"form-check-label\">\n              Quick Sort\n            </label>\n        </div>\n      </div> );\n    }\n}\n","import React from 'react';\n\nexport class SortArray extends React.Component {\n\n  render() {\n    return (<button type=\"button\" className=\"btn btn-primary\" id=\"sort-btn\" onClick={this.props.onClick}>Sort</button>);\n  }\n}\n","export function getBubbleSortAnimation(array) {\n  var animationSteps = [];\n  var swap;\n  var temp;\n  do {\n    swap = false;\n    for (let i = 0; i < array.length - 1; ++i) {\n      // swapping two array elements\n      if (array[i] > array[i + 1])\n      {\n        // push the index of the one selected which will be used to set it to red\n        animationSteps.push([i]);\n        // push the indices of the two elements being swapped\n        animationSteps.push([i, i + 1]);\n        // push the indices of the two elements being swapped and their height\n        animationSteps.push([i, i + 1, array[i + 1], array[i]]);\n        // push the indices of the two elements being swapped to set their colors back to light blue\n        animationSteps.push([i, i + 1]);\n        temp = array[i];\n        array[i] = array[i + 1];\n        array[i + 1] = temp;\n        swap = true;\n      }\n      else {\n        animationSteps.push([i]);\n        animationSteps.push([-1]);\n        animationSteps.push([-1]);\n        animationSteps.push([i, -1]);\n      }\n    }\n    animationSteps.push([array.length - 1]);\n    animationSteps.push([-1]);\n    animationSteps.push([-1]);\n    animationSteps.push([array.length - 1, -1]);\n  } while (swap);\n  return{\n    animationSteps: animationSteps,\n    sortedArray: array\n  };\n}\n\n\n// function to get selection sort animations\nexport function getSelectionSortAnimation(array) {\n  let animationSteps = [];\n  let startScan, minIndex, minValue;\n  for (startScan = 0; startScan < array.length - 1; ++startScan) {\n    minIndex = startScan;\n    minValue = array[startScan];\n    for (let index = startScan + 1; index < array.length; index++) {\n      if (array[index] < minValue) {\n        minValue = array[index];\n        minIndex = index;\n      }\n      }\n      animationSteps.push([startScan]);\n      animationSteps.push([startScan, minIndex]);\n      animationSteps.push([startScan, minIndex, minValue, array[startScan]]);\n      animationSteps.push([startScan, minIndex]);\n      array[minIndex] = array[startScan];\n      array[startScan] = minValue;\n    }\n    return  {\n      animationSteps: animationSteps,\n      sortedArray: array\n    };\n  }\n\n\n  // function to get merge sort animations\n  export function getMergeSortAnimation(array) {\n    if (array.length <= 1) {\n      return {\n        animationSteps: array,\n        sortedArray: array\n      }\n    }\n    const animationSteps = [];\n    const tempArray = array.slice();\n    mergeSort(array, 0, array.length - 1, tempArray, animationSteps);\n    return {\n      animationSteps: animationSteps,\n      sortedArray: array\n    }\n  }\n\n\n  function mergeSort(array, startIndex, endIndex, tempArray, animationSteps) {\n    if (startIndex === endIndex) {\n      return;\n    }\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSort(tempArray, startIndex, middleIndex, array, animationSteps);\n    mergeSort(tempArray, middleIndex + 1, endIndex, array, animationSteps);\n    merge(array, startIndex, middleIndex, endIndex, tempArray, animationSteps);\n\n  }\n\n  function merge(array, startIndex, middleIndex, endIndex, tempArray, animationSteps) {\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n      if (tempArray[i])\n      animationSteps.push([i,j]);\n      animationSteps.push([i,j]);\n      if (tempArray[i] <= tempArray[j]) {\n        animationSteps.push([k, tempArray[i]]);\n        array[k++] = tempArray[i++];\n      }\n      else {\n        animationSteps.push([k, tempArray[j]]);\n        array[k++] = tempArray[j++];\n      }\n    }\n    while (i <= middleIndex) {\n      animationSteps.push([i, i]);\n      animationSteps.push([i, i]);\n      animationSteps.push([k, tempArray[i]]);\n      array[k++] = tempArray[i++];\n    }\n    while (j <= endIndex) {\n      animationSteps.push([j, j]);\n      animationSteps.push([j, j]);\n      animationSteps.push([k, tempArray[j]]);\n      array[k++] = tempArray[j++];\n    }\n\n  }\n\n\n\nexport function getQuickSortAnimation(array) {\n    const animationSteps = [];\n    quickSort(array, 0, array.length - 1, animationSteps);\n    return {\n      animationSteps: animationSteps,\n      sortedArray: array\n    };\n\n  }\n  function partition(array, startIndex, endIndex, animationSteps) {\n      // get the pivotIndex\n      var pivotIndex = getPivotIndex(array, startIndex, endIndex);\n      // pivotIndex will be set to dark blue when sorting\n      animationSteps.push([pivotIndex, -1]);\n      animationSteps.push([-1]);\n      animationSteps.push([-1]);\n      var pivot   = array[pivotIndex];\n      var too_big_index = startIndex;\n      var too_small_index = endIndex;\n      while (too_big_index <= too_small_index) {\n        while(array[too_big_index] < pivot) {\n          ++too_big_index;\n        }\n        while(array[too_small_index] > pivot) {\n          --too_small_index;\n        }\n        if (too_big_index <= too_small_index) {\n          // swap the two array elemtns at too_big_index and too_small_index\n          swap(array, too_big_index, too_small_index);\n          // the two array elements being swapped will be set to red, green and back to light blue\n          animationSteps.push([too_big_index, too_small_index]);\n          animationSteps.push([too_big_index, too_small_index, array[too_big_index], array[too_small_index]]);\n          animationSteps.push([too_big_index, too_small_index]);\n          too_big_index++;\n          too_small_index--;\n        }\n      }\n      // set the pivotIndex back to light blue\n      animationSteps.push([-1]);\n      animationSteps.push([-1]);\n      animationSteps.push([pivotIndex, -1]);\n      // return the new pivotIndex\n      return too_big_index;\n\n    }\n\n  function swap(items, i, j) {\n      var temp = items[i];\n      items[i] = items[j];\n      items[j] = temp;\n  }\n\n  function quickSort(array, startIndex, endIndex, animationSteps) {\n      var newPivotIndex;\n      if (array.length > 1) {\n        // partition arrays about the pivotIndex\n        newPivotIndex = partition(array, startIndex, endIndex, animationSteps);\n        if (startIndex < newPivotIndex - 1)\n        {\n          // recursively sort the part in front of pivotIndex\n          quickSort(array, startIndex, newPivotIndex - 1, animationSteps);\n        }\n        if (newPivotIndex < endIndex) {\n          // recursively sort the part after the pivotIndex\n          quickSort(array, newPivotIndex, endIndex, animationSteps);\n       }\n      }\n      return array;\n    }\n\n\n    // helper function of quickSort to get pivot index by finding the median of the three\n    // randomly choosen array elements\n    function getPivotIndex(array, minIndex, maxIndex) {\n      let firstIndex = getRandomNumberInAnInterval(minIndex, maxIndex);\n      let firstValue = array[firstIndex];\n      let secondIndex = getRandomNumberInAnInterval(minIndex, maxIndex);\n      let secondValue = array[secondIndex];\n      let thirdIndex = getRandomNumberInAnInterval(minIndex, maxIndex);\n      let thirdValue = array[thirdIndex];\n      let valueArray = [firstValue, secondValue, thirdValue];\n      valueArray.sort((a,b) => {return a-b;});\n      if (valueArray[1] === firstValue) {\n        return firstIndex;\n      }\n      else if (valueArray[1] === secondValue) {\n        return secondIndex;\n      }\n      else {\n        return thirdIndex;\n      }\n    }\n\n    function getRandomNumberInAnInterval(lower, upper) {\n      return Math.floor(Math.random() * upper) % (upper - lower) + lower;\n    }\n","import React from 'react';\nimport './algoVisualizer.css'; //stylesheet\nimport {GenerateRandomArray} from './generateRandomArray'; //component for restart button\nimport {SelectArraySize} from './selectArraySize'; // component for selecting array size\nimport {SelectSortingSpeed} from './selectSortingSpeed'; // component for selecting sorting speed\nimport {SelectSortingType} from './selectSortingType'; // component for selecting sorting algorithm\nimport {SortArray} from './sortArray'; // component for sort button\nimport {getBubbleSortAnimation} from './sortingAlgorithm'; // function to get animation array for bubble sort\nimport {getSelectionSortAnimation} from './sortingAlgorithm'; // function to get animation array for selection sort\nimport {getMergeSortAnimation} from './sortingAlgorithm'; // function to get animation array for merge sort\nimport {getQuickSortAnimation} from './sortingAlgorithm'; // function to get animation array for quick sort\nimport 'bootstrap/dist/css/bootstrap.css'; // import bootstrap\n\nconst MAIN_COLOR = \"#add8e6\"; // main_color is light blue\nconst CHANGING_COLOR = 'green';\nconst PREPARING_COLOR = 'red';\nconst TRAVERSE_COLOR = 'blue';\n\n\n\nexport default class AlgoVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {array: [],\n                arraySize: 50,\n                sortingSpeed: 5,\n                sortingAlgorithm: \"Bubble\",\n                width: 1000,\n                height: 800};\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.restoreOldArray = this.restoreOldArray.bind(this);\n    this.changeArraySize = this.changeArraySize.bind(this);\n    this.createRandomArray = this.createRandomArray.bind(this);\n    this.changeSortingSpeed = this.changeSortingSpeed.bind(this);\n    this.changeSortingType = this.changeSortingType.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.selectSortingAlgoritm = this.selectSortingAlgoritm.bind(this);\n\n  }\n\n  // when the app is rendered the first time\n  componentDidMount() {\n    this.createRandomArray();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.updateWindowDimensions(); // update width and height in this.state\n    testSortingAlgorithm(getBubbleSortAnimation);  // test the correctness of each algorithm\n    testSortingAlgorithm(getSelectionSortAnimation);\n    testSortingAlgorithm(getMergeSortAnimation);\n    testSortingAlgorithm(getQuickSortAnimation);\n\n  }\n  // function to update the width and height to ensure responsiveness\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n\n  }\n\n  // function to restore the original array after each turn\n  restoreOldArray() {\n    let newArray = this.state.array;\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; ++i) {\n      let newHeight = newArray[i];\n      arrayBars[i].style.height = `${newHeight}px`;;\n    }\n  }\n\n  // function to create a random array at the beginning of each session\n  createRandomArray() {\n    let randomArray = [];\n    const LOWER_LIMIT = 5;\n    const UPPER_LIMIT = Math.floor(this.state.height * 0.5); // upper_limit is half of the device height\n    for (let index = 0; index < this.state.arraySize; ++index){\n      randomArray.push(getRandomNumberInAnInterval(LOWER_LIMIT, UPPER_LIMIT));\n    }\n    this.setState({array: randomArray});\n  }\n\n  async changeArraySize(newSize){\n    await this.setState({arraySize: newSize});\n    // when changing array size, create a new array and enable the sort button\n    this.createRandomArray();\n    this.enableSortButtonAfterSorting();\n  }\n  async changeSortingSpeed(newSortingSpeed) {\n    await this.setState({sortingSpeed: newSortingSpeed});\n    // when changing the sorting speed, restore the original array and enable the sort button\n    this.restoreOldArray();\n    this.enableSortButtonAfterSorting();\n  }\n\n  async changeSortingType(newSortingAlgorithm) {\n    await this.setState({sortingAlgorithm: newSortingAlgorithm});\n    // when changing the sorting algorithm, restore the original array and enable the sort button\n    this.restoreOldArray();\n    this.enableSortButtonAfterSorting();\n  }\n\n  // function to select sorting algorithm based on the one selected\n  selectSortingAlgoritm() {\n    switch(this.state.sortingAlgorithm){\n      case \"Bubble\":\n        return this.bubbleSort;\n      case \"Selection\":\n        return this.selectionSort;\n      case \"Merge\":\n        return this.mergeSort;\n      case \"Quick\":\n        return this.quickSort;\n      default:\n        console.log(\"sortingAlgorithm was not selected!\");\n    }\n  }\n\n  // prevent users from clicking sort button multiple times\n  disableSelectionsWhileSorting() {\n    document.getElementById('sort-btn').disabled = true;\n  }\n\n  // allow users to sort again after completing the sorting turn successfully\n  enableSortButtonAfterSorting() {\n    document.getElementById('sort-btn').disabled = false;\n  }\n  // function to refresh the app when users click on restart\n  refreshPage() {\n    window.location.reload(true);\n  }\n\n\n  // function to do bubbleSort\n  bubbleSort() {\n    // disable the sort button\n    this.disableSelectionsWhileSorting();\n    // get the animation array for animation steps\n    const animationSteps = getBubbleSortAnimation(this.state.array.slice()).animationSteps;\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animationSteps.length; ++i){\n      if (animationSteps[i][0] === -1) {\n        continue;\n      }\n      let stage = i %  4;\n      let speed = i * this.state.sortingSpeed;\n      let barOneStyle, barTwoStyle;\n      switch(stage) {\n        // set the bar selected to dark blue\n        case 0:\n          const [bar1Idx] = animationSteps[i];\n          barOneStyle = arrayBars[bar1Idx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = TRAVERSE_COLOR;\n          }, speed);\n          break;\n        // set the two bars out of order to red\n        case 1:\n          const [barOneIndex, barTwoIndex] = animationSteps[i];\n          barOneStyle = arrayBars[barOneIndex].style;\n          barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PREPARING_COLOR;\n            barTwoStyle.backgroundColor = PREPARING_COLOR;\n          }, speed);\n          break;\n        // switch them and set them to green\n        case 2:\n          const [bar1Index, bar2Index, newHeight1, newHeight2] = animationSteps[i];\n          barOneStyle = arrayBars[bar1Index].style;\n          barTwoStyle = arrayBars[bar2Index].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = CHANGING_COLOR;\n            barTwoStyle.backgroundColor = CHANGING_COLOR;\n            barOneStyle.height = `${newHeight1}px`;\n            barTwoStyle.height = `${newHeight2}px`;\n          }, speed);\n          break;\n        // set their colors back to light blue\n        case 3:\n          const [bar1, bar2] = animationSteps[i];\n          barOneStyle = arrayBars[bar1].style;\n          barTwoStyle  = barOneStyle;\n          if (bar2 !== -1){\n            barTwoStyle = arrayBars[bar2].style;\n          }\n          setTimeout(() => {\n          barOneStyle.backgroundColor = MAIN_COLOR;\n          if (bar2 !== -1)\n          {\n            barTwoStyle.backgroundColor = MAIN_COLOR;\n          }\n        }, speed);\n          break;\n        default:\n          console.log(\"Something wrong!\");\n      }\n    }\n\n\n\n\n  }\n\n  // function to do selectionSort\n  selectionSort() {\n    // disable the sort button\n    this.disableSelectionsWhileSorting();\n    // get the animation steps for selection sorting\n    const animationSteps = getSelectionSortAnimation(this.state.array.slice()).animationSteps;\n    for (let i = 0; i < animationSteps.length; ++i){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let stage = i %  4;\n      let speed = i * this.state.sortingSpeed;\n      let barStyle1, barStyle2;\n      switch(stage) {\n        // set the bar selected to dark blue\n        case 0:\n          const [barOne] = animationSteps[i];\n          barStyle1 = arrayBars[barOne].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = TRAVERSE_COLOR;\n          }, speed);\n          break;\n        case 1:\n        // set the two bars which are about to be switched to red\n          const [bar1Idx, bar2Idx] = animationSteps[i];\n          barStyle1 = arrayBars[bar1Idx].style;\n          barStyle2 = arrayBars[bar2Idx].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = PREPARING_COLOR;\n            barStyle2.backgroundColor = PREPARING_COLOR;\n          }, speed);\n          break;\n        case 2:\n        // switch their heights and change to green\n          const [barOneIndex, barTwoIndex, newHeight1, newHeight2] = animationSteps[i];\n          barStyle1 = arrayBars[barOneIndex].style;\n          barStyle2 = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n              barStyle1.backgroundColor = CHANGING_COLOR;\n              barStyle2.backgroundColor = CHANGING_COLOR;\n              barStyle1.height = `${newHeight1}px`;\n              barStyle2.height = `${newHeight2}px`;\n            }, speed);\n          break;\n        case 3:\n        // set their colors back to light blue\n          const [bar1, bar2] = animationSteps[i];\n          barStyle1 = arrayBars[bar1].style;\n          barStyle2 = arrayBars[bar2].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = MAIN_COLOR;\n            barStyle2.backgroundColor = MAIN_COLOR;\n          }, speed);\n          break;\n        default:\n          console.log(\"Something is wrong!\");\n        }}\n  }\n\n\n  //function to do merge sort\n  mergeSort() {\n    // disable the sort button\n    this.disableSelectionsWhileSorting();\n    const animationSteps = getMergeSortAnimation(this.state.array.slice()).animationSteps;\n    for (let i = 0; i < animationSteps.length; ++i){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let stage = i %  3;\n      let speed = i * this.state.sortingSpeed;\n      let barStyle1, barStyle2;\n      switch(stage) {\n        case 0:\n          const [barOne, barTwo] = animationSteps[i];\n          barStyle1 = arrayBars[barOne].style;\n          barStyle2 = arrayBars[barTwo].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = PREPARING_COLOR;\n            barStyle2.backgroundColor = PREPARING_COLOR;\n          }, speed);\n          break;\n        case 1:\n          const [bar1Idx, bar2Idx] = animationSteps[i];\n          barStyle1 = arrayBars[bar1Idx].style;\n          barStyle2 = arrayBars[bar2Idx].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = MAIN_COLOR;\n            barStyle2.backgroundColor = MAIN_COLOR;\n          }, speed);\n          break;\n        case 2:\n          const [barOneIndex, newHeight] = animationSteps[i];\n          barStyle1 = arrayBars[barOneIndex].style;\n          setTimeout(() => {\n              barStyle1.height = `${newHeight}px`;\n            }, speed);\n          break;\n        default:\n          console.log(\"Something is wrong!\");\n        }}\n  }\n\n  // function to do quick sort\n  quickSort() {\n    // disable the sort button\n    this.disableSelectionsWhileSorting();\n    const animationSteps = getQuickSortAnimation(this.state.array.slice()).animationSteps;\n    for (let i = 0; i < animationSteps.length; ++i){\n      if (animationSteps[i].length === 1) {\n        continue;\n      }\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let stage = i %  3;\n      let speed = i * this.state.sortingSpeed;\n      let barStyle1, barStyle2;\n      switch(stage) {\n        case 0:\n          const [barOne, barTwo] = animationSteps[i];\n          barStyle1 = arrayBars[barOne].style;\n          if (barTwo === -1) {\n            setTimeout(() => {\n              barStyle1.backgroundColor = TRAVERSE_COLOR;\n          }, speed);\n          }\n          else {\n            barStyle2 = arrayBars[barTwo].style;\n            setTimeout(() => {\n              barStyle1.backgroundColor = PREPARING_COLOR;\n              barStyle2.backgroundColor = PREPARING_COLOR;\n            }, speed);\n          }\n          break;\n        case 1:\n          const [bar1Idx, bar2Idx, newHeight1, newHeight2] = animationSteps[i];\n          barStyle1 = arrayBars[bar1Idx].style;\n          barStyle2 = arrayBars[bar2Idx].style;\n          setTimeout(() => {\n            barStyle1.backgroundColor = CHANGING_COLOR;\n            barStyle2.backgroundColor = CHANGING_COLOR;\n            barStyle1.height = `${newHeight1}px`;\n            barStyle2.height = `${newHeight2}px`;\n          }, speed);\n          break;\n        case 2:\n          const [barOneIndex, barTwoIndex] = animationSteps[i];\n          barStyle1 = arrayBars[barOneIndex].style;\n          if (barTwoIndex === -1) {\n            setTimeout(() => {\n              barStyle1.backgroundColor = MAIN_COLOR;\n            }, speed);\n          }\n          else {\n            barStyle2 = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barStyle1.backgroundColor = MAIN_COLOR;\n                barStyle2.backgroundColor = MAIN_COLOR;\n              }, speed);\n          }\n          break;\n        default:\n          console.log(\"Something is wrong!\");\n        }}\n\n  }\n\n\n\n  render() {\n\n    // get the array being sorted\n    let array = this.state.array;\n    // get the sorting algorithm selected\n    let sortingAlgorithm = this.selectSortingAlgoritm();\n    // get the width of each rectangular bar\n    let bar_width = Math.floor(this.state.width * 0.65 / this.state.arraySize);\n    // the value of each element in the array will be the height of each array bar\n    return (\n      <div className=\"page\">\n        <h1 className=\"title\">Welcome to Algorithm Visualizer!</h1>\n        <div className=\"array-graph\">\n          {array.map((element, index) => (\n            <div className=\"array-bar\"\n                 key={index}\n                 style={{height: `${element}px`, width: `${bar_width}px`}}>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"selections\">\n          <div className=\"selection\">\n            <SelectArraySize onChange={this.changeArraySize}/>\n          </div>\n          <div className=\"selection\">\n            <SelectSortingSpeed onChange={this.changeSortingSpeed}/>\n          </div>\n          <div className=\"selection\" id=\"algorithm-selection\">\n            <SelectSortingType onChange= {this.changeSortingType}/>\n          </div>\n          <div className=\"buttons\">\n            <div className=\"btn\">\n              <GenerateRandomArray onClick={this.refreshPage}/>\n            </div>\n            <div className=\"btn\">\n              <SortArray onClick={sortingAlgorithm}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// function to test the sorting algorithm\nfunction testSortingAlgorithm(sortFunction) {\n  // get a random length for the two arrays being compared\n  const randomLength = getRandomNumberInAnInterval(0, 300);\n  let array = [];\n  // get a random array by pushing random numbers between 0 and 1000\n  for (let i = 0; i < randomLength; ++i) {\n    array.push(getRandomNumberInAnInterval(0, 1000));\n  }\n  // use built-in javaScript function to sort the array\n  let jsSortedArrray = array.slice().sort((a, b) => {return a-b;});\n  // use our algorithms to sort the array\n  let sortArray = sortFunction(array.slice()).sortedArray;\n  // compare the two sorted array\n  console.log(\"The two arrays are equal? \" + areTwoArraysEqual(jsSortedArrray, sortArray));\n}\n\n// function to compare two arrays\nfunction areTwoArraysEqual(array1, array2) {\n  // the two arrays are not equal if they have different sizes\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  // compare corresponding elements of the two arrays\n  else {\n    for (let i = 0; i < array1.length; ++i) {\n      if (array1[i] !== array2[i]){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// function to get a random nummber in an intervals\nfunction getRandomNumberInAnInterval(lower, upper) {\n  return Math.floor(Math.random() * upper) % (upper - lower) + lower;\n}\n","import React from 'react';\nimport './App.css';\nimport AlgoVisualizer from './AlgoVisualizer/algoVisualizer.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgoVisualizer></AlgoVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from 'jquery';\n//import Popper from 'popper.js';\nimport App from './App.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}